{"version":3,"file":"static/js/450.1075f3b0.chunk.js","mappings":"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","sources":["components/Analyzer/Analyzer.js","pages/Checker.js"],"sourcesContent":["import { Button, Collapse, Form, Input, message, Switch, Table } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport React, { useState } from 'react';\r\nimport JSONPretty from 'react-json-pretty';\r\nimport 'animate.css';\r\nimport './Analyzer.css';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nfunction Analyzer() {\r\n  const [editingRow, setEditingRow] = useState(null);\r\n  const [formPayloadAnalyzed] = Form.useForm();\r\n  const [propList, setPropList] = useState([]);\r\n\r\n  const defaultColumns = [\r\n    {\r\n      title: 'Campo',\r\n      dataIndex: 'propertyName',\r\n      key: 'propertyName',\r\n      render: (text, record) => {\r\n        if (editingRow === record.key) {\r\n          return (\r\n            <Form.Item\r\n              name=\"propertyName\"\r\n            >\r\n              <Input className={\"editable-cell\"} />\r\n            </Form.Item>\r\n          );\r\n        } else {\r\n          return text\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'Tipo',\r\n      dataIndex: 'type',\r\n      key: 'type',\r\n      render: (text, record) => {\r\n        if (editingRow === record.key) {\r\n          return (\r\n            <Form.Item\r\n              name=\"type\"\r\n            >\r\n              <Input className=\"editable-cell\" />\r\n            </Form.Item>\r\n          );\r\n        } else {\r\n          return text\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'Descrição',\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n      render: (text, record) => {\r\n        if (editingRow === record.key) {\r\n          return (\r\n            <Form.Item\r\n              name=\"description\"\r\n            >\r\n              <Input className=\"editable-cell\" />\r\n            </Form.Item>\r\n          );\r\n        } else {\r\n          return text\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'Regra de Preenchimento',\r\n      dataIndex: 'fillRule',\r\n      key: 'fillRule',\r\n      render: (text, record) => {\r\n        if (editingRow === record.key) {\r\n          return (\r\n            <Form.Item\r\n              name=\"fillRule\"\r\n            >\r\n              <Input className=\"editable-cell\" />\r\n            </Form.Item>\r\n          );\r\n        } else {\r\n          return text\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'Obrigatório',\r\n      dataIndex: 'required',\r\n      key: 'required',\r\n      render: (_, record) => {\r\n        return (\r\n          <Form.Item\r\n            name=\"required\"\r\n          >\r\n            <Switch style={{ marginTop: '20px' }} defaultChecked onChange={(checked => {\r\n              changeRequiredRow(record.key, checked);\r\n              formPayloadAnalyzed.setFieldValue(\"required\", checked);\r\n            })} />\r\n          </Form.Item>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: 'Ações',\r\n      dataIndex: 'validated',\r\n      key: 'validated',\r\n      render: (_, record) => {\r\n        return (\r\n          <>\r\n            <Button type=\"link\" onClick={() => {\r\n              setEditingRow(record.key);\r\n              formPayloadAnalyzed.setFieldsValue({\r\n                propertyName: record.propertyName,\r\n                type: record.type,\r\n                description: record.description,\r\n                fillRule: record.fillRule,\r\n                required: record.required\r\n              })\r\n            }}>Editar</Button>\r\n            <Button type=\"link\" htmlType=\"submit\">Salvar</Button>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  function startExamination(values) {\r\n    const { payloadInput } = values;\r\n    try {\r\n      const payloadParsed = parseInput(payloadInput);\r\n      const payloadSimplified = reduceArraysForSimplicity(payloadParsed);\r\n      const examined = examinePayload(payloadSimplified, []);\r\n      setPropList([...examined]);\r\n      feedbackMessage(true, 'Payload examinado com sucesso');\r\n    } catch (error) {\r\n      feedbackMessage(false, error);\r\n    }\r\n  }\r\n\r\n\r\n  function feedbackMessage(success, text) {\r\n    success ? message.success(text) : message.error(text)\r\n  }\r\n\r\n  function parseInput(payloadInput) {\r\n    try {\r\n      return JSON.parse(payloadInput);\r\n    } catch (error) {\r\n      throw 'Payload informado é inválido';\r\n    }\r\n  }\r\n\r\n  function reduceArraysForSimplicity(payloadParsed) {\r\n    let overallArrayClean = Array.isArray(payloadParsed) ? payloadParsed.slice(0, 1) : payloadParsed;\r\n\r\n    console.log(`# Raw payload values:`);\r\n    console.log(payloadParsed);\r\n\r\n    console.log(`# Overall:`);\r\n    console.log(overallArrayClean);\r\n\r\n    for (let prop in overallArrayClean) {\r\n      const propType = returnPropertyType(overallArrayClean[prop]);\r\n      if (propType === 'array') {\r\n        if (overallArrayClean[prop].length > 0) {\r\n          overallArrayClean[prop] = overallArrayClean[prop].slice(0, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    return overallArrayClean;\r\n  }\r\n\r\n  function examinePayload(payloadParsed, propertiesStack) {\r\n    let properties = propertiesStack;\r\n\r\n    for (let prop in payloadParsed) {\r\n      const propType = returnPropertyType(payloadParsed[prop]);\r\n      const propZerada = prop == 0;\r\n\r\n      if (propType === 'object' || propType === 'array') {\r\n        properties.push({\r\n          propertyName: propZerada ? '-- início --' : `${prop} (INÍCIO)`,\r\n          type: propType,\r\n          description: '',\r\n          required: true,\r\n          fillRule: '',\r\n          validated: false\r\n        });\r\n        examinePayload(payloadParsed[prop], properties);\r\n\r\n        properties.push({\r\n          propertyName: propZerada ? '-- fim --' : `${prop} (FIM)`,\r\n          type: propType,\r\n          description: '',\r\n          required: true,\r\n          fillRule: '',\r\n          validated: false\r\n        });\r\n\r\n      } else {\r\n        properties.push({\r\n          propertyName: prop,\r\n          type: propType,\r\n          description: '',\r\n          required: true,\r\n          fillRule: '',\r\n          validated: false\r\n        });\r\n      }\r\n    }\r\n\r\n    return applyIndexValue(properties);\r\n  }\r\n\r\n  function applyIndexValue(propertiesList) {\r\n    return propertiesList.map((prop, index) => {\r\n      return { key: index + 1, ...prop };\r\n    });\r\n  }\r\n\r\n  function returnPropertyType(prop) {\r\n    if (!prop) return 'null';\r\n    if (Array.isArray(prop)) return 'array';\r\n    return typeof (prop);\r\n  }\r\n\r\n  function saveRowChanges(values) {\r\n    let selectedRowInformation = propList.find(pos => pos.key === editingRow);\r\n    let collapsedObjects = { ...selectedRowInformation, ...values };\r\n    let indexPosition = propList.findIndex(pos => pos.key === editingRow);\r\n    let allPropList = [...propList];\r\n    allPropList[indexPosition] = collapsedObjects;\r\n    setPropList(allPropList);\r\n    setEditingRow(null);\r\n  }\r\n\r\n  function changeRequiredRow(rowKey, boolean) {\r\n    let selectedRowInformation = propList.find(pos => pos.key === rowKey);\r\n    selectedRowInformation.required = boolean;\r\n    let indexPosition = propList.findIndex(pos => pos.key === editingRow);\r\n    let allPropList = [...propList];\r\n    allPropList[indexPosition] = selectedRowInformation;\r\n    setPropList(allPropList);\r\n  }\r\n\r\n  function handlerRowBackground(rowProperties) {\r\n    return rowProperties.required ? '' : 'not-required-row';\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{ display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'space-between', padding: '20px', paddingBottom: '0px' }}>\r\n        <Form name=\"payloadAnalyzed\" onFinish={startExamination} style={{ width: '80%' }}>\r\n          <div style={{ width: '100%' }}>\r\n            <Collapse\r\n              className=\"collapse-wrapper\"\r\n              defaultActiveKey={['1']}\r\n              style={{ backgroundColor: 'rgb(16,16,16,0.85)', border: 'none', borderBottom: '20px', borderRadius: '10px', boxShadow: '0px 0px 10px 0px rgb(34 34 34 / 15%)' }}\r\n            >\r\n              <Panel\r\n                header=\"Payload a ser analisádo\"\r\n                key=\"1\"\r\n                style={{ border: 'none' }}\r\n              >\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'left', padding: '15px', paddingTop: '0' }}>\r\n                  {/* <h1 style={{ paddingTop: '2px', marginBottom: '0px' }}><strong>Payload alvo da análise</strong></h1> */}\r\n                  <span>Insira abaixo o payload que será analisado, todos os campos do payload serão detalhados.</span>\r\n                </div>\r\n                <Form.Item name=\"payloadInput\">\r\n                  <TextArea\r\n                    placeholder=\"Cole um payload de exemplo\"\r\n                    style={{\r\n                      resize: 'none',\r\n                      border: 'none',\r\n                      maxHeight: '200px',\r\n                      minHeight: '200px',\r\n                      overflowY: \"scroll\",\r\n                      borderRadius: '5px',\r\n                      boxShadow: '0px 0px 10px 0px rgb(34 34 34 / 5%)'\r\n                    }}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item style={{ marginBottom: '5px' }}>\r\n                  <Button\r\n                    style={{ width: '100%', height: '50px', boxShadow: '0px 0px 10px 0px rgb(34 34 34 / 20%)' }}\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                  >\r\n                    <strong>Examinar Payload</strong>\r\n                  </Button>\r\n                </Form.Item>\r\n              </Panel>\r\n            </Collapse>\r\n\r\n          </div>\r\n        </Form>\r\n        <div style={{ width: '100%' }}>\r\n          {/* <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '15px' }}>\r\n              <CompassOutlined style={{ paddingRight: '5px', fontSize: '20px' }} />\r\n              <h1 style={{ paddingTop: '8px', marginBottom: '0px' }}>Payload Base</h1>\r\n              <span>Propriedades do payload que será analisado</span>\r\n            </div>\r\n            <TextArea\r\n              placeholder=\"Cole um payload de exemplo\"\r\n              style={{ resize: 'none', border: 'none', maxHeight: '200px', minHeight: '200px', overflowY: \"scroll\", borderRadius: '5px' }}\r\n            /> */}\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Form form={formPayloadAnalyzed} onFinish={saveRowChanges}>\r\n        {propList.length ?\r\n          <div\r\n            className=\"animate__animated animate__bounceIn\"\r\n            style={{ margin: '40px 20px 20px 20px' }}>\r\n            <Table\r\n              rowClassName={(record, index) => handlerRowBackground(record)}\r\n              dataSource={propList}\r\n              columns={defaultColumns}\r\n              sticky={true}\r\n              pagination={false}\r\n              scroll={{ y: '50vh' }}\r\n              bordered={false}\r\n              size={'small'}\r\n              style={{ boxShadow: '0px 0px 10px 0px rgb(34 34 34 / 15%)', fontSize: \"5px\" }}\r\n            />\r\n          </div>\r\n          : <></>}\r\n      </Form>\r\n\r\n      <div style={{ margin: '40px 20px 20px 20px', width: '30%' }}>\r\n        <Collapse\r\n          className=\"collapse-wrapper\"\r\n          style={{\r\n            backgroundColor: 'rgb(95 108 108 / 85%)',\r\n            border: 'none', borderBottom: '20px',\r\n            borderRadius: '10px',\r\n            boxShadow: '0px 0px 10px 0px rgb(34 34 34 / 15%)'\r\n          }}\r\n        >\r\n          <Panel\r\n            header=\"Informações da tabela\"\r\n            key=\"1\"\r\n            style={{ border: 'none' }}\r\n          >\r\n            {\r\n              propList.length ?\r\n                <div style={{ marginBottom: '10px' }}>\r\n                  <Button\r\n                    className=\"animate__animated\"\r\n                    onClick={(event) => {\r\n                      navigator.clipboard.writeText(JSON.stringify(propList));\r\n                      event.currentTarget.classList.toggle('animate__rubberBand');\r\n                      feedbackMessage(true, 'Conteúdo copiado');\r\n                    }}>Copiar conteúdo</Button>\r\n                </div> : ''\r\n            }\r\n            <JSONPretty\r\n              id=\"json-pretty\"\r\n              data={propList.length ? propList : 'Nenhum payload examinado'}\r\n              style={{ maxHeight: '200px', minHeight: '20px', overflowY: \"scroll\" }}\r\n            />\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Analyzer\r\n","import React from 'react'\r\nimport Analyzer from '../components/Analyzer/Analyzer';\r\n\r\nfunction Checker() {\r\n  return (\r\n    <>\r\n      <Analyzer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Checker\r\n"],"names":["Panel","Collapse","useState","editingRow","setEditingRow","Form","formPayloadAnalyzed","propList","setPropList","defaultColumns","title","dataIndex","key","render","text","record","name","className","_","style","marginTop","defaultChecked","onChange","checked","rowKey","boolean","selectedRowInformation","find","pos","required","indexPosition","findIndex","allPropList","changeRequiredRow","setFieldValue","type","onClick","setFieldsValue","propertyName","description","fillRule","htmlType","feedbackMessage","success","message","examinePayload","payloadParsed","propertiesStack","properties","prop","propType","returnPropertyType","propZerada","push","validated","map","index","Array","isArray","display","flexDirection","width","justifyContent","padding","paddingBottom","onFinish","values","payloadInput","JSON","parse","error","parseInput","payloadSimplified","overallArrayClean","slice","console","log","length","reduceArraysForSimplicity","examined","defaultActiveKey","backgroundColor","border","borderBottom","borderRadius","boxShadow","header","alignItems","paddingTop","TextArea","placeholder","resize","maxHeight","minHeight","overflowY","marginBottom","height","form","collapsedObjects","margin","rowClassName","dataSource","columns","sticky","pagination","scroll","y","bordered","size","fontSize","event","navigator","clipboard","writeText","stringify","currentTarget","classList","toggle","id","data"],"sourceRoot":""}